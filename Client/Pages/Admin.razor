@page "/admin"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using WordleOff.Shared.Games
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<div class="scrollable">
  <div>
    General Stats
  </div>
  <div>
    Total # of sessions alive: @gameSessions.Count
  </div>
  <div>
    Total # of sessions w/ players: @(gameSessions.Where(x => x.PlayerDataDictionary.Count > 0).Count())
  </div>
  <div>
    Total # of multiplayer sessions: @(gameSessions.Where(x => x.PlayerDataDictionary.Count > 1).Count())
  </div>
  <div>
    Total # of players: @(gameSessions.Sum(x => x.PlayerDataDictionary.Count))
  </div>
  <div>
    Total # of players in multiplayer: @(gameSessions.Where(x => x.PlayerDataDictionary.Count > 1).ToList().Sum(x => x.PlayerDataDictionary.Count))
  </div>
  <div>
    Largest # of players in a session: @(gameSessions.MaxBy(x => x.PlayerDataDictionary.Count)?.PlayerDataDictionary.Count ?? 0)
  </div>
  <div>
    Max Rounds: @(gameSessions.MaxBy(x => x.PastAnswers.Count)?.PastAnswers.Count ?? 0)
  </div>
  <hr />
  @foreach (GameSession gameSession in gameSessions)
  {
    <div>
      <div>
        Session ID: @gameSession.SessionId
      </div>
      <div>
        Player count: @gameSession.PlayerDataDictionary.Count
      </div>
      <div>
        Link: <a href=@(NavigationManager.ToAbsoluteUri($"game/{gameSession.SessionId}?spectator=on"))>@(NavigationManager.ToAbsoluteUri($"game/{gameSession.SessionId}?spectator=on"))</a>
      </div>
      <div>
        Player names: @String.Join(" - ", gameSession.PlayerDataDictionary.OrderBy(x => x.Value.Index).Select(x => $"{x.Key} ({x.Value.PlayData.Count})").ToArray())
      </div>
      <div>
        Past answers: @String.Join(" - ", gameSession.PastAnswers.ToArray())
      </div>
      <div>
        Created: @(GetBrowserLocalTime(gameSession.CreatedAt!.Value))
      </div>
      <div>
        Updated: @(GetBrowserLocalTime(gameSession.UpdatedAt!.Value))
      </div>
      <div>
        Session lasted for: @(gameSession.UpdatedAt - gameSession.CreatedAt)
      </div>
      <div>
        Last updated: @(DateTimeOffset.UtcNow - gameSession.UpdatedAt) ago
      </div>
    </div>
    <hr />
  }
</div>



@code {
  private List<GameSession> gameSessions = new();

  private HubConnection? hubConnection;
  private TimeSpan offset = TimeSpan.Zero;

  protected override async Task OnInitializedAsync()
  {
    Int32 offsetMinutes = await jsRuntime.InvokeAsync<Int32>("eval", "-new Date().getTimezoneOffset()");
    offset = TimeSpan.FromMinutes(offsetMinutes);

    hubConnection = new HubConnectionBuilder()
     .WithUrl(NavigationManager.ToAbsoluteUri("/WordleOffHub"))
     .Build();
    hubConnection.On<List<GameSession>>("ServerAdminInfo", (newGameSessions) => ServerAdminInfo(newGameSessions));
    await hubConnection.StartAsync();

    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("key", out var adminKey))
      await hubConnection.InvokeAsync("ClientAdminInfo", adminKey.ToString());
  }

  private void ServerAdminInfo(List<GameSession> newGameSessions)
  {
    var sorted
      = newGameSessions
        .OrderByDescending(x => x.UpdatedAt)
        .OrderByDescending(x => x.PlayerDataDictionary.Count);
    gameSessions = sorted.ToList();
    StateHasChanged();
  }

  // Blazor wasm is not aware of local time. Use javascript to correct this
  private DateTimeOffset GetBrowserLocalTime(DateTimeOffset dateTimeOffset) => new(dateTimeOffset.DateTime + offset, offset);
}