@page "/admin"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using WordleOff.Shared.Games
@inject NavigationManager NavigationManager

<div class="scrollable">
  <div>
    General Stats
  </div>
  <div>
    Number of Sessions Alive: @gameSessions.Count
  </div>
  <div>
    Number of Sessions w/ Players: @(gameSessions.Where(x => x.PlayerDataDictionary.Count > 0).Count())
  </div>
  <div>
    Session w/ Largest # of Players: @(gameSessions.MaxBy(x => x.PlayerDataDictionary.Count)?.PlayerDataDictionary.Count ?? 0)
  </div>
  <hr />
  @foreach (GameSession gameSession in gameSessions)
  {
    <div>
      <div>
        Session ID: @gameSession.SessionId
      </div>
      <div>
        Player Count: @gameSession.PlayerDataDictionary.Count
      </div>
      <div>
        Link: <a href=@(NavigationManager.ToAbsoluteUri($"game/{gameSession.SessionId}?spectator=on"))>@(NavigationManager.ToAbsoluteUri($"game/{gameSession.SessionId}?spectator=on"))</a>
      </div>
      <div>
        Player Names: @String.Join(" - ", gameSession.PlayerDataDictionary.OrderBy(x => x.Value.Index).Select(x => $"{x.Key} ({x.Value.PlayData.Count})").ToArray())
      </div>
      <div>
        Past Answers: @String.Join(" - ", gameSession.PastAnswers.ToArray())
      </div>
      <div>
        Created: @gameSession.CreatedAt
      </div>
      <div>
        Updated: @gameSession.UpdatedAt
      </div>
    </div>
    <hr />
  }
</div>



@code {
  private List<GameSession> gameSessions = new();

  private HubConnection? hubConnection;

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
     .WithUrl(NavigationManager.ToAbsoluteUri("/WordleOffHub"))
     .Build();
    hubConnection.On<List<GameSession>>("ServerAdminInfo", (newGameSessions) => ServerAdminInfo(newGameSessions));
    await hubConnection.StartAsync();

    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("key", out var adminKey))
      await hubConnection.InvokeAsync("ClientAdminInfo", adminKey.ToString());
  }

  private void ServerAdminInfo(List<GameSession> newGameSessions)
  {
    var sorted = newGameSessions.OrderBy(x => x.SessionId).OrderByDescending(x => x.PlayerDataDictionary.Count);
    gameSessions = sorted.ToList();
    StateHasChanged();
  }
}