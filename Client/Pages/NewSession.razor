@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="div-center">
  <button @onclick="CreateNewGame" disabled="@(!IsConnected)">Create a new game</button>
  <div style="height: 20px;"></div>
  <div>
    OR type in the code your friends/family gave you
  </div>  
  <div>
    <input class="session-id-part" @bind="sessionIdPart1" disabled="@(!IsConnected)" type="text" inputmode="numeric" maxlength="3" />
    <input class="session-id-part" @bind="sessionIdPart2" disabled="@(!IsConnected)" type="text" inputmode="numeric" maxlength="3" />
    <input class="session-id-part" @bind="sessionIdPart3" disabled="@(!IsConnected)" type="text" inputmode="numeric" maxlength="3" />
    <button @onclick="JoinSession" disabled="@(!IsConnected)">Join</button>
  </div>
  <div style="height: 60px;"></div>
  <a href="https://github.com/magicsgram/wordleoff">https://github.com/magicsgram/wordleoff</a>
</div>

@code {
  private HubConnection? hubConnection;

  private String sessionIdPart1 = "";
  private String sessionIdPart2 = "";
  private String sessionIdPart3 = "";

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/WordleOffHub"))
      .Build();
    hubConnection.Closed += async (e) => await OnClosed(e);
    hubConnection.On<String>("NewSessionCreated", (newSessionId) => NavigationManager.NavigateTo($"game/{newSessionId}"));

    await hubConnection.StartAsync();
  }

  public Boolean IsConnected => hubConnection?.State == HubConnectionState.Connected;
  private async Task OnClosed(Exception? e)
  {
    if (hubConnection is not null)
      await hubConnection.StartAsync();
  }

  private async Task CreateNewGame()
  {
    if (hubConnection is not null)
      await hubConnection.SendAsync("ClientCreateNewSession");
  }

  private void JoinSession() => NavigationManager.NavigateTo($"game/{sessionIdPart1}-{sessionIdPart2}-{sessionIdPart3}");

  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }
}
