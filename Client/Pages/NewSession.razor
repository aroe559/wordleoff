@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IAsyncDisposable

<div class="div-center">
  <div class="title-logo-row">WORDLEOFF</div>
  <div style="font-size: 1.3rem;">Play with your friends/family!</div>
  <div style="height: 40px;"></div>
  <div>You can either</div>
  <div style="height: 10px;"></div>
  <button class="button" @onclick="CreateNewGame" disabled="@(!IsConnected)">Create a new session</button>
  <div style="height: 15px;"></div>
  <div>OR type in the code your friends/family gave you</div>
  <div style="height: 10px;"></div>
  <div>
    <input class="input-box" placeholder="123" @oninput="OnInput1Async" disabled="@(!IsConnected)" type="text" inputmode="numeric" maxlength="3" tabindex="0" />
    <input class="input-box" placeholder="456" @oninput="OnInput2Async" disabled="@(!IsConnected)" type="text" inputmode="numeric" maxlength="3" tabindex="0" @ref="idPart2"/>
    <input class="input-box" placeholder="789" @oninput="OnInput3" @onkeydown="OnKeyDown3" disabled="@(!IsConnected)" type="text" inputmode="numeric" maxlength="3" tabindex="0" @ref="idPart3"/>
    <button class="button" @onclick="JoinSession" disabled="@(!IsConnected)" tabindex="0">Join</button>
  </div>
  <div style="height: 25px;"></div>
  <a href="https://github.com/magicsgram/wordleoff">https://github.com/magicsgram/wordleoff</a>
  <div style="width: 400px; font-size: 0.75rem;">
    <pp>
      May 6h, 2022
    </pp>
    <p>
      Alright, Congratulations! You've finally managed to crash my server this morning.
      It was running on a server that costs only $7/month and I can't believe it actually managed to survive until today. I get around 9-10k visitors/day now and around 700-1300 concurrent users around noon. I knew it was going to crash soon. I just didn't think today would be the day.
    </p>
    <p>
      To be clear, Wordleoff is my hobby project and it's my gift to fellow Wordle enthusiasts and communities. I intend to keep it free/ad-free as long as my time and money allow.
      Since I upgraded the server to a $50/month tier now, it won't crash anytime soon. And if that happens, my next option can cost me $100+/month (or just heavy optimization of the code which will take a while to finish).
      I'm just glad that people are enjoying this. Thank you for your support, especially the Twitch streamers and the local communities like public libraries for hosting virtual Wordleoff sessions.
    </p>
    <p>
      Love you all!
    </p>
    <p>
      -Kyle
    </p>
  </div>
</div>

@code {
  private HubConnection? hubConnection;

  private String clientGuid = "";

  private String sessionIdPart1 = "";
  private String sessionIdPart2 = "";
  private String sessionIdPart3 = "";

  private ElementReference idPart2;
  private ElementReference idPart3;

  protected override async Task OnInitializedAsync()
  {
    if (await sessionStorage.ContainKeyAsync("wordleoff-clientGuid"))
      clientGuid = await sessionStorage.GetItemAsync<String>("wordleoff-clientGuid");
    else
    {
      clientGuid = Guid.NewGuid().ToString();
      await sessionStorage.SetItemAsStringAsync("wordleoff-clientGuid", clientGuid);
    }

    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/WordleOffHub"))
      .AddMessagePackProtocol()
      .Build();
    hubConnection.Closed += async (e) => await OnClosed(e);
    hubConnection.On<String>("NewSessionCreated", (newSessionId) => NavigationManager.NavigateTo($"game/{newSessionId}"));

    await hubConnection.StartAsync();
  }

  private async Task OnInput1Async(ChangeEventArgs e)
  {
    if (e.Value is not null)
    {
      sessionIdPart1 = (String)e.Value;
      if (sessionIdPart1.Length == 3)
        await jsRuntime.InvokeVoidAsync("setFocusToElement", idPart2);
    }
   }

  private async Task OnInput2Async(ChangeEventArgs e)
  {
    if (e.Value is not null)
    {
      sessionIdPart2 = (String)e.Value;
      if (sessionIdPart2.Length == 3)
        await jsRuntime.InvokeVoidAsync("setFocusToElement", idPart3);
    }
  }

  private void OnInput3(ChangeEventArgs e)
  {
    if (e.Value is not null)
      sessionIdPart3 = (String)e.Value;
  }

  private void OnKeyDown3(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
      JoinSession();
  }

  public Boolean IsConnected => hubConnection?.State == HubConnectionState.Connected;

  private async Task OnClosed(Exception? e)
  {
    if (hubConnection is not null)
      await hubConnection.StartAsync();
  }

  private async Task CreateNewGame()
  {
    if (hubConnection is not null)
      await hubConnection.SendAsync("ClientCreateNewSession");
  }

  private void JoinSession()
  {
    if (sessionIdPart1.Length == 3 && sessionIdPart2.Length == 3 && sessionIdPart3.Length == 3)
      NavigationManager.NavigateTo($"game/{sessionIdPart1}-{sessionIdPart2}-{sessionIdPart3}");
  } 

  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }
}
