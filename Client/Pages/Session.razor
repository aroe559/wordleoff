@page "/game/{SessionId}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.IO.Compression
@using System.Text
@using WordleOff.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@implements IAsyncDisposable

<div style=@($"display: {(sessionFound ? "none" : "")};") class="div-center">
  @searchSessionMessage
</div>
<div style=@($"display: {(!sessionInitialized && sessionFound? "" : "none")};") class="div-center">
  <div class="div-margin-1">Your Name:</div>
  <input class="div-margin-1" @bind="playerName" disabled="@(!IsConnected || IsGameInProgress)" maxlength="20"/>
  <button class="div-margin-1" @onclick="JoinSession" disabled="@(!IsConnected || IsGameInProgress)">Join</button>
  <div>
    @joinErrorMessage
  </div>
</div>
<div
  style=@($"display: {(sessionInitialized && sessionFound ? "" : "none")};")
  class="game"
  @onkeydown="@KeyDown"
  tabindex="0"
  @ref="gameDiv"
>
  @RenderTitleLogo()
  @RenderSessionId()
  <div class="div-center">
    @RenderPlayerDataTable()
  </div>
  <div class="div-center">
    @submitError
    @holdMessage
  </div>
  <br/>
  @RenderKeyboard()
  @RenderResetButton()
</div>

@code {
  [Parameter]
  public String SessionId { get; set; } = "";

  private String playerName = "";
  private String joinErrorMessage = "";
  private String guess = "";
  private String submitError = "";
  private String holdMessage = "";
  private String searchSessionMessage = "Searching....";
  private HubConnection? hubConnection;
  private Boolean canSubmitNewGuess;
  private Boolean sessionInitialized = false;
  private Boolean sessionFound = false;
  private HashSet<String> fullWords = new();
  private String? correctAnswer;

  private String resetButtonClass = "";

  private String copyIdMessage = "Click ID Above to Copy URL";
  private Dictionary<String, PlayerData> playerDataDictionary = new();
  
  private ElementReference gameDiv;

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/WordleOffHub"))
      .Build();
    hubConnection.Closed += async (e) => await OnClosed(e);

    hubConnection.On<Byte[]>("ServerFullWordsCompressed", async (compressedFullWordsBytes) => await StoreFullWords(compressedFullWordsBytes));
    hubConnection.On<Dictionary<String, PlayerData>>("ServerPlayerData", async (newPlayerDataDictionary) => await UpdatePlayerData(newPlayerDataDictionary));
    hubConnection.On<String>("ServerCurrentAnswer", (correctAnswer) => UpdateCurrentAnswer(correctAnswer));
    hubConnection.On<String>("ServerJoinFail", (message) => DisplayJoinFailMessage(message));
    hubConnection.On<Boolean>("ServerSessionFindResult", (result) => HandleSessionFindResult(result));
    
    await hubConnection.StartAsync();
    
    await hubConnection.InvokeAsync("ClientSearchSession", SessionId);
  }

  #region Received from Server

  public async Task StoreFullWords(Byte[] compressedFullWordsBytes)
  {
    await Task.Run(() =>
    {
      MemoryStream input = new(compressedFullWordsBytes);
      MemoryStream output = new();
      using (DeflateStream dstream = new DeflateStream(input, CompressionMode.Decompress))
      {
        dstream.CopyTo(output);
      }
      Byte[] decompressedBytes = output.ToArray();
      String fullWordsString = UTF8Encoding.UTF8.GetString(decompressedBytes);
      fullWords = fullWordsString.Split("\n").ToHashSet();
    });    
  }

  public async Task UpdatePlayerData(Dictionary<String, PlayerData> newPlayerDataDictionary)
  {
    sessionInitialized = true;
    playerDataDictionary = newPlayerDataDictionary;
    if (hubConnection is not null)
    {
      playerName = playerDataDictionary.First(x => x.Value.ConnectionId == hubConnection.ConnectionId).Key;
      UpdateCanSubmitNewGuess();
    }
    UpdateResetButtonClass();
    StateHasChanged();
    await jsRuntime.InvokeVoidAsync("setFocusToElement", gameDiv);
  }

  public void HandleSessionFindResult(Boolean result)
  {
    if (result)
      sessionFound = true;
    else
      searchSessionMessage = "Session not found!!";
    StateHasChanged();
  }

  public void DisplayJoinFailMessage(String message) => joinErrorMessage = message;

  #endregion


  #region Send to Server

  public async Task JoinSession()
  {
    if (playerName.Length == 0)
    {
      joinErrorMessage = "You name cannot be empty!";
      return;
    }
    if (hubConnection is not null)
      await hubConnection.SendAsync("ClientConnectNew", SessionId, playerName);
  }

  public async Task UpdatePlayerName()
  {
    if (hubConnection is not null)
      await hubConnection.SendAsync("ClientUpdatePlayerName", playerName);
  }

  public async Task SubmitGuess()
  {
    if (hubConnection is not null && correctAnswer is not null)
    {
      if (guess.Length != correctAnswer!.Length)
      {
        submitError = $"Guess a {correctAnswer.Length}-letter word";
        return;
      }
      else if (!fullWords.Contains(guess.ToLower()))
      {
        submitError = "Not a word!";
        return;
      }
      if (canSubmitNewGuess)
        await hubConnection.SendAsync("ClientSubmitGuess", playerName, guess.ToLower());
      guess = "";
      submitError = "";
    }
  }

  public async Task Reconnect()
  {
    if (hubConnection is not null)
      await hubConnection.SendAsync("ClientReconnect", SessionId, playerName);
  }

  public void UpdateCurrentAnswer(String newCorrectAnswer) => correctAnswer = newCorrectAnswer;

  #endregion


  #region Other Client Code

  public async Task KeyDown(KeyboardEventArgs e) => await HandleKey(e.Key);

  public async Task HandleKey(String key)
  {
    PlayerData playerData = playerDataDictionary[playerName];
    if (correctAnswer is not null && playerData.PlayData.Count < 6 && !playerData.AnswerGuessCorrectly(correctAnswer) && canSubmitNewGuess)
    {
      if (key == "Backspace" && guess.Length > 0)
      {
        guess = guess.Remove(guess.Length - 1);
      }
      else if (key == "Enter")
      {
        if (guess.Length == correctAnswer.Length)
          await SubmitGuess();
      }
      else if (key.Length == 1)
      {
        Char c = key.ToLower()[0];
        if ('a' <= c && c <= 'z' && guess.Length < correctAnswer.Length)
          guess += c;
      }
    }
  }

  public async Task CopyUrlToClipboard()
  {
    await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"https://www.wordleoff.com/game/{SessionId}");
    copyIdMessage = "Click ID Above to Copy URL (Copied!!!)";
  }

  public Boolean IsConnected => hubConnection?.State == HubConnectionState.Connected;

  public Boolean IsGameInProgress => playerDataDictionary.Any(x => x.Value.PlayData.Count > 0);

  public void UpdateResetButtonClass()
  {
    if (correctAnswer is not null)
    {
      if (playerDataDictionary.Values.All(x => x.PlayData.Count == 6 || x.AnswerGuessCorrectly(correctAnswer)))
        resetButtonClass = "guess-correct";
      else if (playerDataDictionary.Values.All(x => x.PlayData.Count == 0))
        resetButtonClass = "guess-absent";
      else
        resetButtonClass = "guess-present";          
    }
    else
      resetButtonClass = "";
  }

  public void UpdateCanSubmitNewGuess() // Check if anyone's lagging behind me
  {
    Boolean behindOthers = false;
    Boolean alreadyGuessedCorrectly = false;
    Boolean guessLimitReached = false;
    Boolean keyExist = false;

    keyExist = playerDataDictionary.ContainsKey(playerName);
    if (keyExist && correctAnswer is not null)
    {
      if (playerDataDictionary[playerName].AnswerGuessCorrectly(correctAnswer))
        alreadyGuessedCorrectly = true;

      Int32 myGuessCount = playerDataDictionary[playerName].PlayData.Count;
      behindOthers = playerDataDictionary.Values.All((x) =>
      {
        return x.AnswerGuessCorrectly(correctAnswer)
                || x.PlayData.Count >= myGuessCount;
      });
      guessLimitReached = playerDataDictionary[playerName].PlayData.Count == 6;
    }        

    if (!behindOthers && keyExist)
      holdMessage = "Wait until everyone submit their guesses.";
    else if (alreadyGuessedCorrectly)
      holdMessage = "Correct!! Now you can see everyone else's guesses.";
    else if (!alreadyGuessedCorrectly && guessLimitReached)
      holdMessage = $"The answer is {correctAnswer?.ToUpper() ?? ""}";
    else
      holdMessage = "ã…¤";
    canSubmitNewGuess = behindOthers && !alreadyGuessedCorrectly && !guessLimitReached;
  }

  private async Task NewGame()
  {
    if (!await jsRuntime.InvokeAsync<Boolean>("confirm", "This will reset everyone's progress. Do you really want to start a new game?"))
      return;
    if (hubConnection is not null)
      await hubConnection.SendAsync("ClientResetCurrentSession", SessionId);
  }

  private async Task OnClosed(Exception? e)
  {
    if (hubConnection is not null)
    {
      await hubConnection.StartAsync();
      await Reconnect();
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
      await hubConnection.DisposeAsync();
  }

  #endregion


  #region RenderFragments

  private RenderFragment RenderTitleLogo()
  {
    return __builder =>
    {
      <div class="div-center">
        <div class="title-logo-row">
          <div class="guess-tile">W</div>
          <div class="guess-tile">O</div>
          <div class="guess-tile">R</div>
          <div class="guess-tile">D</div>
          <div class="guess-tile">L</div>
          <div class="guess-tile">E</div>
          <div class="guess-tile">O</div>
          <div class="guess-tile">F</div>
          <div class="guess-tile">F</div>
        </div>
      </div>
    };
  }

  private RenderFragment RenderSessionId()
  {
    return __builder =>
    {
      <div class="div-center div-center-vertical">
        <div class="session-id-row" @onclick="CopyUrlToClipboard">
          @foreach (Char c in SessionId)
          {
            <div class="guess-tile guess-tile-small guess-absent">@c</div>
          }
        </div>
        <div>@copyIdMessage</div>
      </div>
    };
  }

  private RenderFragment RenderPlayerDataTable()
  {
    return __builder => {
      if (correctAnswer is null)
      {
        <div></div>
      }
      else
      {
        if (playerDataDictionary.Count == 0)
          return;
        Int32 maxGuessesAmongPlayers = playerDataDictionary.Values.Max(x => x.PlayData.Count);
        Boolean allPlayersAtMaxGuesses = playerDataDictionary.Values.All(x => x.PlayData.Count == maxGuessesAmongPlayers || x.AnswerGuessCorrectly(correctAnswer));
        Boolean godMode = playerDataDictionary.ContainsKey(playerName) ? playerDataDictionary[playerName].AnswerGuessCorrectly(correctAnswer) && allPlayersAtMaxGuesses: false;

        Int32 maxIndex = playerDataDictionary.Count == 0 ? -1 : playerDataDictionary.Max(x => x.Value.Index);
        List<KeyValuePair<String, PlayerData>?> orderedList = new();
        for (Int32 i = 1; i <= maxIndex; ++i)
        {
          var matchingPlayers = playerDataDictionary.Where(x => x.Value.Index == i);
          if (matchingPlayers.Count() > 0)
            orderedList.Add(matchingPlayers.First());
        }
        <table>
          <tr>
            @for (Int32 i = 0; i < orderedList.Count; ++i)
            {
              var pairValue = orderedList[i]!.Value;
              var currentPlayerName = pairValue.Key;
              var currentPlayerData = pairValue.Value;
              Boolean isCurrentPlayerLocal = playerName == currentPlayerName;
              Int32 emptyRowOffset = 0;
              if (isCurrentPlayerLocal)
                emptyRowOffset = 1;
              String youIndicator = (playerName == currentPlayerName) ? " (You)" : "";
              <td class=@($"{(playerName == currentPlayerName && orderedList.Count > 1 ? "my-board" : "")}")>
                <div class="play-container">
                  <div>@($"{currentPlayerName}{youIndicator}")</div>
                  <div class="guess-board">
                    @for (Int32 j = 0; j < currentPlayerData.PlayData.Count; ++j)
                    {
                      String currentGuess = currentPlayerData.PlayData[j];
                      @if (j == maxGuessesAmongPlayers - 1 && !allPlayersAtMaxGuesses)
                        @RenderTempGuessRow(currentPlayerName, currentGuess)
                      else
                        @RenderGuessRow(currentGuess, !isCurrentPlayerLocal && !godMode)
                    }
                    @if (currentPlayerData.PlayData.Count < 6 && isCurrentPlayerLocal)
                    {
                      @RenderGuessingRow()
                    }
                    @for (Int32 j = currentPlayerData.PlayData.Count + emptyRowOffset; j < 6; ++j)
                    {
                      @RenderEmptyRow()
                    }
                  </div>
                </div>              
              </td>
            }
          </tr>
        </table>
      }
    };
    
  }

  private RenderFragment RenderGuessRow(String currentGuess, Boolean hideLetters)
  {
    return __builder =>
    {
      if (correctAnswer is null)
      {
        <div></div>
      }
      else
      {
        List<Int32> colorList = new();
        Dictionary<Char, Int32> letterCountInAnswer = new();
        for (Int32 i = 0; i < correctAnswer.Length; ++i)
        {
          colorList.Add(0);
          if (letterCountInAnswer.ContainsKey(correctAnswer[i]))
            ++letterCountInAnswer[correctAnswer[i]];
          else
            letterCountInAnswer.Add(correctAnswer[i], 1);
        }
        for (Int32 i = 0; i < correctAnswer.Length; ++i)
          if (currentGuess[i] == correctAnswer[i])
          {
            colorList[i] = 2;
            --letterCountInAnswer[currentGuess[i]];
          }
        for (Int32 i = 0; i < correctAnswer.Length; ++i)
          if (correctAnswer.Contains(currentGuess[i]) && letterCountInAnswer[currentGuess[i]] > 0 && colorList[i] < 1)
          {
            colorList[i] = 1;
            --letterCountInAnswer[currentGuess[i]];
          }
        <div class="guess-row">
          @for (Int32 i = 0; i < correctAnswer.Length; ++i)
          {
            Char displayChar = hideLetters ? '?' : currentGuess[i];
            String backgroundColorCSS = "";
            @switch (colorList[i])
            {
              case 0:
                backgroundColorCSS = "guess-absent";
                break;
              case 1:
                backgroundColorCSS = "guess-present";
                break;
              case 2:
                backgroundColorCSS = "guess-correct";
                break;
            }
            <div class=@($"guess-tile {backgroundColorCSS}")>@displayChar</div>
          }
        </div>
      }
    };
  }

  private RenderFragment RenderTempGuessRow(String currentPlayerName, String currentGuess)
  {
    return __builder => {
      <div class="guess-row">
        @if (playerName == currentPlayerName)
        {
          @foreach (Char c in currentGuess)
          {
            <div class="guess-tile guess-guessing">@c</div>
          }
        }
        else
        {
          @foreach (Char c in currentGuess)
          {
            <div class="guess-tile guess-guessing">?</div>
          }
        }
      </div>
    };    
  }

  private RenderFragment RenderEmptyRow()
  {
    return __builder =>
    {
      if (correctAnswer is null)
      {
        <div></div>
      }
      else
      {
        <div class="guess-row">
          @foreach (Char c in correctAnswer)
          {
            <div class="guess-tile guess-empty"></div>
          }
        </div>
      }
    };
  }

  private RenderFragment RenderGuessingRow()
  {
    return __builder =>
    {
      if (correctAnswer is null)
      {
        <div></div>
      }
      else
      {
        <div class="guess-row">
          @for (Int32 i = 0; i < guess.Length; ++i)
          {
            <div class=@($"guess-tile guess-guessing")>@guess[i]</div>
          }
          @for (Int32 i = guess.Length; i < correctAnswer.Length; ++i)
          {
            <div class="guess-tile guess-empty"></div>
          }
        </div>
      }
    };
  }

  private RenderFragment RenderKeyboard()
  {
    return __builder =>
    {
      if (correctAnswer is not null)
      {
        List<String> playData = playerDataDictionary[playerName].PlayData;

        Dictionary<Char, Int32> letterTileValues = new();
        for (Char c = 'a'; c <= 'z'; ++c)
          letterTileValues.Add(c, -1);
        foreach (String play in playData)
        {
          for (Int32 i = 0; i < play.Length; ++i)
          {
            Char c = play[i];
            if (correctAnswer[i] == c)
              letterTileValues[c] = 2;
            else if (correctAnswer.Contains(c) && letterTileValues[c] < 2)
              letterTileValues[c] = 1;
            else if (letterTileValues[c] < 1)
              letterTileValues[c] = 0;
          }
        }
        Dictionary<Char, String> letterTileColors = new();
        foreach (var pair in letterTileValues)
        {
          letterTileColors.Add(
            pair.Key,
            pair.Value switch {
              -1 => "guess-guessing",
              0 => "guess-absent",
              1 => "guess-present",
              2 => "guess-correct",
              _ => "guess-guessing"
            }
          );
        }

        <div class="div-center">
          <div class="keyboard-board">
            <div class="div-center div-center-vertical">
              <div class="keyboard-row">
                @RenderKeyboardChar(letterTileColors, 'q')
                @RenderKeyboardChar(letterTileColors, 'w')
                @RenderKeyboardChar(letterTileColors, 'e')
                @RenderKeyboardChar(letterTileColors, 'r')
                @RenderKeyboardChar(letterTileColors, 't')
                @RenderKeyboardChar(letterTileColors, 'y')
                @RenderKeyboardChar(letterTileColors, 'u')
                @RenderKeyboardChar(letterTileColors, 'i')
                @RenderKeyboardChar(letterTileColors, 'o')
                @RenderKeyboardChar(letterTileColors, 'p')
              </div>
              <div class="keyboard-row">
                <div class=@($"guess-tile guess-tiles-offset-50")></div>
                @RenderKeyboardChar(letterTileColors, 'a')
                @RenderKeyboardChar(letterTileColors, 's')
                @RenderKeyboardChar(letterTileColors, 'd')
                @RenderKeyboardChar(letterTileColors, 'f')
                @RenderKeyboardChar(letterTileColors, 'g')
                @RenderKeyboardChar(letterTileColors, 'h')
                @RenderKeyboardChar(letterTileColors, 'j')
                @RenderKeyboardChar(letterTileColors, 'k')
                @RenderKeyboardChar(letterTileColors, 'l')
                <div class=@($"guess-tile guess-tiles-offset-50")></div>
              </div>
              <div class="keyboard-row">
                <div
                  class=@($"guess-tile guess-tile-keyboard-small guess-tiles-offset-150 guess-guessing")
                  @onclick="@(e => HandleKey("Enter"))"
                >
                  Enter
                </div>
                @RenderKeyboardChar(letterTileColors, 'z')
                @RenderKeyboardChar(letterTileColors, 'x')
                @RenderKeyboardChar(letterTileColors, 'c')
                @RenderKeyboardChar(letterTileColors, 'v')
                @RenderKeyboardChar(letterTileColors, 'b')
                @RenderKeyboardChar(letterTileColors, 'n')
                @RenderKeyboardChar(letterTileColors, 'm')
                <div
                  class=@($"guess-tile guess-tile-keyboard guess-tiles-offset-150 guess-guessing")
                  @onclick="@(e => HandleKey("Backspace"))"
                >
                  âŒ«
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    };
  }

  private RenderFragment RenderKeyboardChar(Dictionary<Char, String> letterTileColors, Char renderChar)
  {
    return __builder => {
      <div
        class=@($"guess-tile guess-tile-keyboard {letterTileColors[renderChar]}")
        @onclick="@(e => HandleKey(renderChar.ToString()))"
      >
        @renderChar
      </div>
    };
  } 

  private RenderFragment RenderResetButton()
  {
    return __builder =>
    {
      <div class="div-center">
        <div class="reset-row" @onclick="NewGame">
          <div class=@($"guess-tile guess-tile-small {@resetButtonClass}")>R</div>
          <div class=@($"guess-tile guess-tile-small {@resetButtonClass}")>E</div>
          <div class=@($"guess-tile guess-tile-small {@resetButtonClass}")>S</div>
          <div class=@($"guess-tile guess-tile-small {@resetButtonClass}")>E</div>
          <div class=@($"guess-tile guess-tile-small {@resetButtonClass}")>T</div>
        </div>
      </div>
    };
  }

  #endregion
}
